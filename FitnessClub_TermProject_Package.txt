CREATE OR REPLACE PACKAGE FITNESS_CLUB_PKG -- Package Specification
    AS 
    pv_total_members NUMBER := 0;
    
    TYPE member_record_type IS RECORD (
        firstname ff_member.firstname%TYPE,
        lastname ff_member.lastname%TYPE
    );
    PROCEDURE CHECK_PAYSTATUS_SP
        (p_status IN NUMBER);
    PROCEDURE DISPLAY_CLASS_MEMBERS_SP
        (p_class_id IN NUMBER);

    FUNCTION GET_CLASSES_BY_DAY_SF
        (p_day_id NUMBER) 
        RETURN SYS_REFCURSOR;
    FUNCTION GET_MEMBERSHIP_PRICE_SF
        (p_membership_id IN NUMBER) 
        RETURN NUMBER;
END;



CREATE OR REPLACE PACKAGE BODY FITNESS_CLUB_PKG AS -- Package Body
    TYPE payment_record_type IS RECORD (
        payment_id ff_payment.payment_id%TYPE,
        member_id ff_member.member_id%TYPE,
        firstname ff_member.firstname%TYPE,
        lastname ff_member.lastname%TYPE);
        
    PROCEDURE CHECK_PAYSTATUS_SP(p_status IN NUMBER) AS
        CURSOR payment_cur IS
            SELECT p.payment_id, m.member_id, m.firstname, m.lastname
            FROM ff_payment p 
            JOIN ff_member m ON p.member_id = m.member_id
            WHERE p.idstatus = p_status;
        lv_payment_rec payment_record_type;
        lv_status ff_status.statusdesc%TYPE;
        lv_no_data BOOLEAN := TRUE;
    BEGIN
        SELECT statusdesc INTO lv_status
        FROM ff_status 
        WHERE idstatus = p_status;
        DBMS_OUTPUT.PUT_LINE('Members that have payment status: ' || lv_status);
        OPEN payment_cur;
        LOOP
            FETCH payment_cur INTO lv_payment_rec;
            EXIT WHEN payment_cur%NOTFOUND;
            lv_no_data := FALSE;
            pv_total_members := pv_total_members + 1;
            DBMS_OUTPUT.PUT_LINE('Member ID: ' || lv_payment_rec.member_id || ', Name: ' || lv_payment_rec.firstname || ' ' || lv_payment_rec.lastname || ' (Payment ID: ' || lv_payment_rec.payment_id || ').');
        END LOOP;
        CLOSE payment_cur;

        IF lv_no_data THEN
            DBMS_OUTPUT.PUT_LINE('No payments found with status ID: ' || p_status);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END CHECK_PAYSTATUS_SP;

    PROCEDURE DISPLAY_CLASS_MEMBERS_SP(p_class_id IN NUMBER) AS
        CURSOR member_cur IS
            SELECT m.firstname, m.lastname
            FROM ff_member m 
            JOIN ff_class_member a ON m.member_id = a.member_id
            WHERE a.class_id = p_class_id;
        lv_member_rec member_record_type;
        lv_classname ff_class.class_name%TYPE;
        no_members_found BOOLEAN := TRUE;
    BEGIN
        SELECT class_name INTO lv_classname
        FROM ff_class
        WHERE class_id = p_class_id;
        DBMS_OUTPUT.PUT_LINE('"' || lv_classname || '" members:');
        OPEN member_cur;
        LOOP
            FETCH member_cur INTO lv_member_rec;
            EXIT WHEN member_cur%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(lv_member_rec.firstname || ' ' || lv_member_rec.lastname);
            no_members_found := FALSE;
            pv_total_members := pv_total_members + 1;
        END LOOP;
        CLOSE member_cur;

        IF no_members_found THEN
            DBMS_OUTPUT.PUT_LINE('No members found for the specified class ID.');
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Class with that ID does not exist.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
    END DISPLAY_CLASS_MEMBERS_SP;


    FUNCTION GET_CLASSES_BY_DAY_SF(p_day_id NUMBER) RETURN SYS_REFCURSOR AS
        lv_cursor SYS_REFCURSOR;
    BEGIN
        OPEN lv_cursor FOR
            SELECT class_name, start_time, end_time
            FROM ff_class c
            JOIN ff_class_day cd ON c.class_id = cd.class_id
            WHERE cd.day_id = p_day_id;
        RETURN lv_cursor;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20002, 'An unexpected error occurred: ' || SQLERRM);
    END GET_CLASSES_BY_DAY_SF;

    FUNCTION GET_MEMBERSHIP_PRICE_SF(p_membership_id IN NUMBER) RETURN NUMBER 
    AS
    lv_membership_price ff_membership.price%TYPE;
    BEGIN
        SELECT price INTO lv_membership_price
        FROM ff_membership
        WHERE membership_id = p_membership_id;
        RETURN lv_membership_price;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN -1;
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'An error occurred while retrieving the membership price.');
    END GET_MEMBERSHIP_PRICE_SF;

END FITNESS_CLUB_PKG;